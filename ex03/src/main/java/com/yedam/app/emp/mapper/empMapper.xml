<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- namespace = 연결될 interface의 full name -->
<mapper namespace="com.yedam.app.emp.mapper.EmpMapper">
	<!-- 전체조회 -->
	<!-- select는 parameterType안써도 알아서 받아옴. 단, resultType은 반드시 명시 -->
	<select id="selectEmpAllList" resultType="EmpVO">
	
	<!-- mapper.xml에는 *를 안씀. 정확하게 명시하는 편. 테이블에 대한 정보는 내가 쓰는 테이블 외에는 잘 모름 -->
	<!-- 컬럼은 한줄씩 쓰는 게 좋음(수정판단 용이) -->
	<!-- mybatis는 필드를 읽을 때 VO는 필드 접근제한자가 private. resultType이 vo -> mybatis가 getter와 setter사용(VO클래스에 getter, setter가 정상적으로 등록되어야 동작이 가능하다) -->
	<!-- jsp EL태그 내부값 쓸 때 필드만 쓰는데 getter, setter를 사용하는 것. Lombok이 죽으면 전체가 죽음 -->
		<!-- 테이블을 만들 때 컬럼명을 c_id이런식으로 하면 안됨(최소한 두문자 이상의 단어로 연결). c_id -> cId(필드) => (getter, setter) getCID : mybatis가 컬럼에 대해서 cid로 읽음. 무조건 첫글자만 대문자로 인식함. 대문자가 2개가 돼버리면 대문자로 인식못함. getter, setter로 mybatis가 동작하는 게 그래서 중요함. 컬럼명을 쓸땐 한문자X -->
		SELECT employee_id,
			   first_name,
			   last_name,
			   email,
			   phone_number,
			   hire_date,
			   job_id,
			   salary,
			   commission_pct,
			   manager_id,
			   department_id
		FROM employees
	ORDER BY employee_id DESC
	<!-- 전체조회 할때는 무조건 ORDER BY넣어줌(보통 primary key로) -->
	</select>
	<!-- 단건조회 -->
	<select id="selectEmpInfo" resultType="EmpVO">
		SELECT employee_id,
			   first_name,
			   last_name,
			   email,
			   phone_number,
			   hire_date,
			   job_id,
			   salary,
			   commission_pct,
			   manager_id,
			   department_id
		FROM employees
		<!-- 전체조회와의 차이점 : 무조건 하나를 보장 . #을 이용해서 parameterType을 참고. getter를 이용해서 어떤 값을 원하는지 결정?-->
		WHERE employee_id = #{ employeeId }
		<!--  #{ } : PrepareStatement를 의미함.  =  0 -> 0, Kang -> 'Kang'. 숫자 0을 입력하면 0을 반환. Kang이라는 문자를 보내면 'Kang'(따옴표를 붙여주는 역할을 하는게 #) 실제로 가진 데이터 값에 자동으로 대응. 데이터 넘길 때 사용
			  ${ } : Statement와 같음.             0 ->0, Kang -> Kang(숫자일땐 상관없는데 문자일땐 대응해주지 않음). 쿼리문을 변경하는 테이블 사용할 때 많이 사용(쿼리문 자체를 구성할때 사용). Insert InTO할 때 테이블의 변동성이 크다면 $로 변수값을 대체하는 것도 가능함. 단, 값을 넘길때는 무조건 #을 이용해야함. (문자열이나 날짜에 대응하기 힘들기때문에)--> 
	</select>
	<!-- 등록 -->
	<!-- 등록과 수정은 서브태그가 존재(delete제외) . select는 서브태그 존재하지않음(넘어오는 데이터 기반 값을 조회하는 게 전부라서)  ====> selectKey. insert를 실행시키든 update를 실행시키든 같이 동작하는 SQL문. insert하기 전에 많이 사용하는 편임-->
	<insert id="insertEmpInfo" parameterType="EmpVO">
	<!-- EmpVO는 매개변수임에도 selectKey에 의해서 새로운 값을 가지게 됨 -->
	<!-- DML은 무조건 정수반환이라서 resultType은 생략함 -->
	
	<!-- ctrl + space했을 때 selectKey를 제외하고는 dynamic sql태그. -->
	<!--  selectKey는 insert나 update가 동작전, 동작후에. -->
		<selectKey  keyProperty="employeeId" resultType="int" order="BEFORE">
		<!-- keyProperty = parameterType에 들어갈 필드명? resultType= keyProperty의 타입. order= 실행 전에 동작할건지 실행 후에 동작할건지-->
			SELECT NVL(MAX(employee_id),0) + 1
			FROM employees
			<!-- primary key를 기반으로 새로운 primary key값을 조회하는 게 가능하다. 조회결과는 일반적으로 prameterType에 담긴다. 자바쪽에서도 insert쪽에서 사용한 primary key를 알 수 있음 -->
		</selectKey>
		INSERT INTO employees
				 ( employee_id
				 , first_name
				 , last_name
				 , email
				 , hire_date			 		 
				 , job_id
				 , salary
			   )
			  VALUES
			  (
			  	#{employeeId}
			  	, #{firstName}
			  	, #{lastName}
			  	, #{email}
			  	<!-- 혹시라도 생략되었을 때 sysdate로 대체 -->
				 <if test="hireDate != null">
			  	, #{hireDate}
			  	 <!-- ,를 앞에 두는 이유: 마지막 컬럼 처리가 잘못되면 미완성의 sql문이 생성될 수 있음 -->
				 <!-- mybatis에서 if는 else가 없어서 manager_id, 했을 때 마지막에 존재하는 컬럼이 무조건 있다는 가정하면 상관없는데 아니면 미완성의 SQL문 형성됨 -->
				 </if>
				 <if test="hireDate == null">
				 <!-- date타입은 null만 체크 -->
				 , sysdate
				 </if>
				 <!-- 참,거짓 하려면 if태그 2개써야함. 또는 when -> if, otherwise-> else(조건 여러개걸때는 choose태그 사용) -->
			  	, #{jobId}
			  	, #{salary}
			  )
		</insert>	  
			  <!--  
			  
			  <choose>
			  	<when test="hireDate != null">	==========> when은 필요한만큼 추가 가능
			  		,#{hireDate}
			  	</when>
			  	<otherwise>
			  		, sysdate
			  	</otherwise>
			  </choose>
			  , #{jobId}
			  
			  -->
		
		<!-- 수정 : 사원의 급여를 정해진 비율로 인상 -->
		<!-- 매개변수가 2개면 parameterType을 한꺼번에 처리못함 -> id만 정확하게 가져옴. 내부에서 sql문 구성할때 @param의 이름을 사용하면 됨 -->
		<update id="updateEmpSal">
			UPDATE employees
			SET salary = salary * (1 + #{raise} / 100)
			WHERE employee_id = #{emp.employeeId}
			<!-- @Param의 값이 객체인 경우 WHERE employee_id = #{emp.employeeId}로 사용 -->
		</update>
		
		<!-- 수정: 사원 정보 수정. 수정되는 항목에 따라 여러개의 SQL문 생성X -->
		<!-- 1) 전체수정 모든 항목에 업데이트 진행, 전제조건 : 모든 항목에 정보가 존재  예) 게시판 수정할 때 제목과 작성자 먼저 뿌려줌. 그후 사용자가 수정하면 수정된 사항만 보내는 게 아니라 무조건 전체를 보냄. 애초에 전체를 띄워놓은 경우 뭘 수정한 지 체크하기 쉽지않음. 그래서 전체를 다 보냄-->
		<!-- 일부수정    예)비밀번호만 수정. 전체를 수정하지 않음. 전체수정, 일부수정 쿼리문 따로 안함 -->
		<!-- 2) Mybatis -> Dynamic SQL 사용 : 총 4개 태그. if, choose, trim(값을 가져와서 sql문을 조성하는 것 중에 하나. 앞에 붙는 거,중간에 들어가는 거. 다루기 어려움. trim대신 foreach로 대체 가능(데이터를 기반으로 하나의 sql문 완성시키는건 같음. foreach는 배열로 값을 넘기면 값이 들어있는 것만큼 반복시킴). foreach item : 배열받을 변수명. open : 값이 있을 경우 ""안부터 시작. 배열의 값이 끝나지 않았으면 separator(중간값), close는 마지막 인덱스일때. 값을 중심으로 동적으로 sql문 완성가능 nullable:null허용할지 체크. 배열의 값을 기준으로 연산자에 뿌려줘야 할 경우 사용 -->
		<!-- foreach는 값기반으로 많이 씀. 문법이 제한적임, trim은 내부에 조건식을 이용해서 얘를 붙일건지 말건지. where절을 붙일지 말지 결정하는거?. 중복될때 and or어떻게 처리할지 결정해야함. trim은 표현식의 연속성을사용할 때 사용. foreach는 특정한 값 반복해서 처리 -->
		
		<!-- 동적으로 만들 수 있는 부분에는 무조건 if,choose, trim, foreach 다 가능 -->
		<update id="updateEmpInfo" parameterType="EmpVO">
			UPDATE employees
				<set>
				<!-- set이 동적으로 동작하는 경우에는 if태그가 어떻게 구성되느냐에 따라 각 컬럼이 가진 ,가 사라짐. 지금은 3개가 있지만 혼자만 남게 될수도있음 => 미완성 sql문 되는 걸 방지(set과 where이 동적으로 되면 콤마문제를 처리해줌)-->
					<if test="firstName != null and !firstName.equals('')">
					<!-- test안에 #이 안붙는건 sql영역이 아니라는 뜻. 자바에서 사용하는 방식으로 test안 구성해야함. string은 값을 체크할 떄 equals를 사용. null뿐만 아니라 공백도 정상적으로 처리해줘야함  -->
					first_name = #{firstName},
					</if>
					<if test="firstName != null and !firstName.equals('')">
					email = #{email},
					</if>
					<if test="salary > 0">
					salary = #{salary},
					<!-- wrap 객체는 null을 가질 수 있지만, int(기본타입)는 null이 존재할 수 없음. 타입에 따라 표현식을 다르게 해줘야함-->
					</if>				
				</set>			
			WHERE employee_id = #{employeeId}
		</update>
		
		<!-- dynamic sql 결과에 따라서 set절이 붙을수도있고 사라질 수도 있어서 <set>을 따로 태그로 씀. 다이나믹 sql과 결합해서 where, set쓸 때 같이 동적으로 움직여줘야해서 태그형태가 되어야함 -->
		
		<!-- 삭제 -->
		
		<delete id="deleteEmpInfo" parameterType="int">
			DELETE FROM employees
			WHERE employee_id = #{empId}
			
			<!-- 값이 딱 하나일 때는 이름에 구애받지 않음. mybatis는 값이 들어오면 값을 강제로 집어넣음. 매개변수 이름이 길 때 짧게 줄일 때 유용함  예)EmpVO줄때도 값이 하나라서 우선적으로 검색 -->
		
		</delete>
</mapper>
