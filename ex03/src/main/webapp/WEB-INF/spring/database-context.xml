<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	
	<!-- 어느 위치의 파일을 읽어들이겠습니다. -->
	<context:property-placeholder location="classpath:config/db.properties"/>
	<!-- properties 내부의 값을 읽어들일 땐 ${}사용, 그리고 왼쪽에 사용된 키값을 이용해서 value가져옴 -->
	
	<!-- datasource connection pool -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- value안에 db.properties내부의 값 가져옴 -->
		<property name="driverClassName" value="${driver}" />
		<property name="jdbcUrl" value="${url}" />
		<property name="username" value="${userid}" />
		<property name="password" value="${userpwd}" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" 
	destroy-method="close">
		<!-- 생성자 주입.이미 생성된 bean을 주입 -->
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<!-- mybatis SqlSessionFactory -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 단일 파일은 *안붙음 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml"/>
		<!-- xml파일 별도로 지정(mapper는 밑에 scan이 알아서 읽어들임).xml파일은 java와 같이 안 두는 회사도 있어서 -->
		<!-- classpath밑의 패키지 밑에 둬서 com/yeda/app이 붙음. ** -> 기능에 상관없이 mapper. classpath말고 자바소스밑에서 가져올 수도 있음. classpath같은 경우 실제 물리적위치가 생략될 수 있음. -->
		<!-- 주의) build되면서 xml파일 못읽어오는 경우가 종종 있어서. 여러파일이 같은 이름이면 하나만 읽어들인다든가 하면 *붙여야함.-->
		<property name="mapperLocations" value="classpath*:com/yedam/app/**/mapper/*Mapper.xml"/>
	</bean>
	
	<!-- mapper scan -->
	<mybatis-spring:scan base-package="com.yedam.app.**.mapper" />
	
	<!-- tx에서 transaction manager로 이름이 바뀜 -->
	<!-- TransactionManager bean 등록 -->
	<bean id="transactionManager"
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- @Transactional 어노테이션 처리 -->
	<!-- 컨트롤러에 있는 annotation읽어들이는 annotation-driven/트랜잭션 매니저가 관리하는 annotation읽어들임 -> 범위는 따로 지정X. 어노테이션 서비스 밑에서만 존재해서?. component 를 기능에따라 service, repository로 나눔. @service붙은 애들에 대해서만 읽어들여서 범위지정할 필요없음 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
