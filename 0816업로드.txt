1.dependency 복사 후 추가

현재 스프링(ex04)으로 실습하는 이유 : 스프링 부트는 간소화 시킨 것. 스프링 부트는 dependency 후 application property 항목에 에 넣기만 하면됨. 그럼 어느 컨테이너에 들어가서 동작하는지 모름

페이징을 할 때 어떤식으로 값을 끄집어 내는지 배움

2.commons-fileupload dependency 하면 servlet-context.xml에 resolve 몇 개를 별도로 추가해야함 -> multipartresolver
  스프링 공식홈페이지 ->project -> spring framework -> learn -> 5.3.29 api.doc -> ctrl + f 후 multipartresolver 검색 ->  commonsmultipartresolver클래스찾기(빈등록하기 위해서 풀네임 찾으려고 온거임)

view resolver는 서블릿컨텍스트에 있음(웹기반해서 동작시키기 위한 빈들 등록하는 곳)
디폴트 resolver, tiles resolver 등 resolver는 종류가 많음. view resolver 외에도 다운로드, 업로드 하는 resolver가 따로 존재. 목적 자체가 달라서 우선순위 필요없음

버전업 되면서 완전히 이름이 달라지는 경우가 있어서 class이름 확인할 때 스프링 공식사이트에서 이름을 찾아봄

commonsmultipartresolver = dependency 한 라이브러리를 통해 불러오는 애임

3.풀네임 복사 후 servlet-context.xml에 bean등록(id 따로 등록필요함. 단, 소문자로 시작함) -> 서버가 multipart형태로 들어오는 멀티미디어를 인식할 수 있게 됨

multipartResolver는 단순히 파일업로드때문에 사용하진 않음. 보통 fetch 이용해서 FormData를 보낼때(원래 별도 세팅없이 가능함. formdata는 강제로 인코딩 타입을 multipart로 바꿔버림. 폼안의 데이터를 내장객체로 만들기 위해 만들어졌는데, 미디어파일이 당연히 있을거라고 가정하는 애이기 때문에 multipart취급이 되어버림. 심지어 form태그를 사용하지 않고 보내도 폼태그를 multipart데이터로 보낼 수 있음) Server쪽에서 해당 요구사항 처리하기 위해서도 필요함
form태그 사용시 파일 업로드를 하기 위해서 인코딩 타입을 multipart으로 함. enc=multipart = > 인코딩을 명확하게 하지 않는다는 뜻. 서버에서 디코딩해서 데이터를 끄집어냄(utf-8은 디코딩을 위한 것)
데이터를 주고 받을 때 무엇으로 인코딩 했다고 정보 하나 보냄. 받는 쪽에서는 어떤 걸 기준으로 인코딩했는지 알면 디코딩도 정상적으로 가능해짐. multipart는 사실상 인코딩을 하지 않음. 미디어가 넘어가다보니까 미디어에 대해서 데이터 보낼 때 기본적으로 인코딩을 하지 않음.(멀티미디어 때문에)
인코딩을 하지 않았을 때 서버쪽에서 대응이 쉽지 않음(디폴트가 각 나라 문자셋을 기준으로 인코딩이 되어있는 게 디폴트인데, multipart는 인코딩을 풀어버리는 것) 스프링은 multipart로 넘어오는 것에 대해서 처리하려면 multipartresolver가 필요함. 단순히 값을 주고 받는 거에도 필요하다는 뜻.
파일 업로드, 다운로드 = 서버에 저장시키고 서버가 가진 파일을 내려받는 것.
jQuery는 formData 궁합이 안 맞아서 잘 안씀. fetch는 formData 내장되어있어서 처리 가능. formData로 멀티미디어든 텍스트값을 보내든 스프링쪽에는 resolver를 등록해야함

파일 업로드, 파일 다운로드를 위해 등록하기도 하지만 자바스크립트에서 사용하는 formData를 해석하기 위해서도 필요하다.(기본파일 + 통신지원) multipartResolver로 request, response접근해서 데이터 끄집어 내오는 것도 가능함


스프링부트는 아예 commons-fileupload가 내장되어 있음
스프링부트나 스프링프레임워크는 업로드 경로를 프로젝트 내로 잡지 않음. 배포를 하면 압축한 파일이 넘어감(우리가 다른 파일 다운받을 때도 압축된 파일 다운 후 같은 파일 있으면 덮어쓰기함 -> 프로젝트 내 경로잡으면 살아남을 수 없음. 사용자가 업로드 했을 때 그 데이터가 살아남지 못함)
기존 file존재해도 덮어쓰고, 충돌이 날 수 있기 때문에 업로드 경로는 절대 안쪽에 두면 안된다. 프로젝트 내에 파일이 안들어가는 경우가 없는 건 아님. 사용자가 사용하기 전에 서버에서 필요한 최초로 세팅할 때 필요한 음악, 사진, 영상을 내장하고 있는거지 사용자가 업로드하는 것들을 내장하고 있지는 않음. 경로만 정확하게 지정하면 transfer to라는 메소드를 사용하기 때문에 다운로드, 업로드 어렵지 않음.

윈도우의 경로는 드라이브부터 시작함. 우분투나 리눅스 환경은 드라이브 개념이 없음. 전부 폴더 개념임 -> 경로가 다르다. 개발할 때 경로와, 배포했을 때 경로가 달라질 수 있음을 고려해야 함. 수정될 수 있는 데이터는 리터럴 값들을 코드안에 집어넣으면 안됨. private 필드에 경로를 취하는 방식을 사용하기도 함. 스프링은 자바가 가지는 정보를 분리시킴. 예)xml파일에 들어가야 하는걸 db.properties로 분리함. 스프링은 properties 파일을 읽어들일 수 있음. 또는 환경변수 읽어들일 수 있는 빈이 동작함

파일경로 -> 외부에 properties파일로 저장할 거임. 만약 경로가 바뀌게 되면 properties의 값을 수정함(config 폴더 밑에 만듦)

4. config 폴더 밑에 app.properties 만듦
경로 : 업로드경로, 로딩경로 2가지가 필요함. 다르진 않음. 결국 업로드한 파일을 끌고 들어와야해서 동일한 경로를 업로드할 때도 사용, 파일 읽어들일 때도 사용하는데 굳이 2개로 나누는 이유 : 사용하는 위치가 다르기 때문에
	업로드 경로는 자바 소스에서 사용, 파일 로드는 xml file에서 사용
5. app.properties 작성
다운로드는 파일 통째로 내려받는거고 load는 화면에 뿌려주는거라서 다름
작성할 때는 key, value형태임. 데이터베이스, 테스트할 때 파일 읽어들일 때 classpath, file -> 읽어들이는 방식이 다름.일종의 프로토콜. 내부의 파일을 읽어들이는 것도 일종의 통신임. file은 로컬에 존재하는 경로를찾음. classpath : 클래스패스에 등록되어있는 세팅값을 찾음
xml은 가공못하고 바로 알려줘야 함.classpath는 별도의 경로가 등록되어서 파일을 찾아가는 것
프로토콜(file, classpath)을 어떻게 등록하느냐에 따라서 찾는 방식이 다르다
xml파일에서 어떤 값으로 읽어들일 때 그래서 file머시기로 시작한다

6. boardweb밑에 컨트롤러 만듦

7. 처리 controller 복붙 후 import 할 땐 java.nio.file.Path

8. views 밑에 upload.jsp 만듦(미디어 파일 넘기는 건 페이지 없이는 불가능 해서)

스프링은 properties가 지정된 대상이 아님. 파일을 읽어들이고자 한다면 경로를 지정해서 해당 파일을 읽으라고 알려줘야함

9. servlet-context.xml에 annotation-driven위에 <context:property-placeholder location="classpath:config/app.properties"/>추가
스프링 프레임워크는 컨테이너가 2개있음. annotation-driven : 1차적으로 컨테이너 읽혀들어감?
db.properties는 database-context(루트 컨테이너를 만듦. 컨테이너는 독립되어있고 필요할 때 상호작용함. )에 있어야하고 servletcontext는 웹컨테이너 만드는 context. 그래서 app.properties는 어노테이션 controller내에서 동작하기 때문에 servletcontext에서 읽어들임. annotation-driven하기 전에 먼저 존재해야 함. 그래야 해당 컨트롤러 만들 때 이 값을 불러올 수 있음 생성할 때는 독립적인 정보로 생성되어야 함

결과 : c드라이브 밑에 upload폴더 생기고 날짜 형식 폴더 생김. 단 (업로드전)sky.jpg -> (새로생성된 UUID) 이름길어짐_sky.jpg. 유니크 할 수 있도록 새로운 이름 붙여줌


///////////업로드 한 거 불러오기
정적인 파일 읽어들일 때 경로를 읽어들임. resources는 로컬에 존재하는 경로만 읽어들이지 않음

mapping = 사용하고자 하는 경로. 해당 경로 밑에 전부 매핑하겠다 = ** location = 외부이기때문에 file이름으로 접근해야함 근데 이걸 properties에 등록해놔서 그걸 사용하면 됨.properties에 저장된 key값을 사용한다
1.servlet-context에 <resources mapping="/images/**" location="${file.loading.path}"/>추가함

2.경로에 web/images/2023/08/01/파일이름 복사해서 입력하면 웹에 사진나옴

multipart를 사용하면 stream을 건드릴 일은 없음. 경로에 대해서 어떻게 처리할건지가 스프링은 중요하다. transferTo를 이용하지 않을 경우 직접 output스트림 열고 해당파일 생성하고 데이터를 쓰는 방식으로 처리해야함. 그래도 정해진 패턴이라서 메소드를 만들어 놓은 것.
경로는 app.properties에서 처리 이유 : 개발환경, 배포환경이 달라서 배포환경에 맞게 경로를 새로 만들어줘야 해서 배포하기 전에 경로를 수정하여 진행하기 위해서
app.properties에서 upload와 loading은 같은 위치를 가리키지만 자바에서 인식하는것과 xml에서 인식하는 게 다름. xml에서 경로 매핑하는 게 좀 더 일반적임. 자바는 쉽게 사용하기 위해서 단순처리한 것. 윈도우와 리눅스는 파일에 대한 프로토콜 2갠데 운영체제에 따라 인식하는 게 다름. 그래서 file:///c로 함(우분투는 슬러시 3개)
upload.jsp는 자바스크립트 이용해서 함. formData클래스 자체가 멀티미디어를 비동기로 처리하기 위해 만들어진 클래스. jquery ajax로 이미지 데이터 넘기면 어려움(텍스트는 쉽지만.).
비동기로 데이터를 보낼 때 Content-type이 multipart-formData. 이 경우 통신을 보내면서 boundary 머시기를 자동생성함 -> jquery Ajax로 처리하기가 어려워서 jquery를 안씀

////////////////DB에 저장
1.컨트롤러에 uploadFile메소드에 맨 밑에 추가
2. 가공 메소드 추가
(그대로 저장하면 안되고 separator를 슬러시로 바꿔야함).
DB에 저장할 땐 images까진 저장할 필요없음. 업로드 fileName을 기반으로 저장하면 되고(그냥 그 밑에 있는 파일명만 저장), 불러올 때는 매핑된 경로를 이용해서 파일 가져오면 됨